-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Formula.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Formula.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transProposition :: Formula.Abs.Proposition -> Result
transProposition x = case x of
  Formula.Abs.Proposition string -> failure x

transFormula :: Formula.Abs.Formula -> Result
transFormula x = case x of
  Formula.Abs.FExp exp -> failure x

transExp :: Formula.Abs.Exp -> Result
transExp x = case x of
  Formula.Abs.ELit lit -> failure x
  Formula.Abs.ENeg exp -> failure x
  Formula.Abs.EAnd exp1 exp2 -> failure x
  Formula.Abs.EOr exp1 exp2 -> failure x
  Formula.Abs.EImply exp1 exp2 -> failure x

transLit :: Formula.Abs.Lit -> Result
transLit x = case x of
  Formula.Abs.LChar proposition -> failure x
  Formula.Abs.LNeg proposition -> failure x
