-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Formula.Par
  ( happyError
  , myLexer
  , pFormula
  , pExp4
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pLit
  ) where

import Prelude

import qualified Formula.Abs
import Formula.Lex

}

%name pFormula Formula
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pLit Lit
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '&'           { PT _ (TS _ 1)           }
  '('           { PT _ (TS _ 2)           }
  ')'           { PT _ (TS _ 3)           }
  '->'          { PT _ (TS _ 4)           }
  '|'           { PT _ (TS _ 5)           }
  '~'           { PT _ (TS _ 6)           }
  L_Proposition { PT _ (T_Proposition $$) }

%%

Proposition :: { Formula.Abs.Proposition }
Proposition  : L_Proposition { Formula.Abs.Proposition $1 }

Formula :: { Formula.Abs.Formula }
Formula : Exp { Formula.Abs.FExp $1 }

Exp4 :: { Formula.Abs.Exp }
Exp4 : Lit { Formula.Abs.ELit $1 } | '(' Exp ')' { $2 }

Exp3 :: { Formula.Abs.Exp }
Exp3 : '~' Exp3 { Formula.Abs.ENeg $2 } | Exp4 { $1 }

Exp2 :: { Formula.Abs.Exp }
Exp2 : Exp2 '&' Exp3 { Formula.Abs.EAnd $1 $3 } | Exp3 { $1 }

Exp1 :: { Formula.Abs.Exp }
Exp1 : Exp1 '|' Exp2 { Formula.Abs.EOr $1 $3 } | Exp2 { $1 }

Exp :: { Formula.Abs.Exp }
Exp : Exp1 '->' Exp { Formula.Abs.EImply $1 $3 } | Exp1 { $1 }

Lit :: { Formula.Abs.Lit }
Lit
  : Proposition { Formula.Abs.LChar $1 }
  | '~' Proposition { Formula.Abs.LNeg $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

